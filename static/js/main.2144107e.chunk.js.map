{"version":3,"sources":["components/form/form.component.jsx","components/weather/weather.component.jsx","App.js","serviceWorker.js","index.js"],"names":["error","className","role","Form","props","onSubmit","loadWeather","type","placeholder","name","autoComplete","Weather","backgroundImage","cityname","weatherIcon","temp_celsius","min","max","maxMinTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","src","alt","App","getWeather","e","a","preventDefault","country","target","elements","value","trim","city","fetch","process","api_call","json","response","setState","sys","main","weather","celsius","calCelsius","temp","get_WeatherIcon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeId","this","Math","floor","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2144107e.chunk.js","sourcesContent":["import React from \"react\";\nimport './form.styles.scss';\n\nconst Form = props => {\n  return (\n    <div className=\"container h-100\">\n      <form onSubmit={props.loadWeather}>\n        <div>{props.error ? error() : \"\"}</div>\n        <div className=\"row\">\n          <div className=\"col-md-3 offset-md-2\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"City\"\n              name=\"city\"\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"col-md-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Country\"\n              name=\"country\"\n              autoComplete=\"off\"\n            />\n          </div>\n          <div className=\"col-md-3 mt-md-0 mt-2 text-md-left \">\n            <button className=\"btn btn-warning\">Get Weather</button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst error = () => {\n  return (\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\n      Please Enter City and Country...!\n    </div>\n  );\n};\n\nexport default Form;","import React from \"react\";\nimport './weather.styles.scss';\n\nconst Weather = props => {\n  return (\n    <div className=\"container text-light\">\n      <div className={props.backgroundImage ? (\n          'Card'\n          ) : ''}\n        >\n        <h1 className=\"text-light py-3\">{props.cityname}</h1>\n        <h5 className=\"py-4\">\n          <i className={`wi ${props.weatherIcon} display-1`}/>\n        </h5>\n\n        {/* Get Celsius */}\n        {props.temp_celsius ? (\n          <h1 className=\"py-2\">{props.temp_celsius}&deg;C</h1>\n        ) : null}\n\n        {/* show max and min temp */}\n        {maxMinTemp(props.temp_min, props.temp_max)}\n\n        {/* Weather description */}\n        <h4 className=\"py-3\">\n          {props.description.charAt(0).toUpperCase() +\n          props.description.slice(1)}\n        </h4>\n        {props.backgroundImage ? (\n          // eslint-disable-next-line jsx-a11y/img-redundant-alt\n          <img src={props.backgroundImage} alt='image'/>\n        ) : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n\nfunction maxMinTemp(min, max) {\n  if (max && min) {\n    return (\n      <h3>\n        <span className=\"px-4\">\n          <i className='wi wi-thermometer-exterior' />\n           min {min}&deg;C\n        </span>\n        <span className=\"px-4\">\n          <i className='wi wi-thermometer' />\n           max {max}&deg;C\n        </span>\n      </h3>\n    );\n  }\n}\n","import React from 'react';\nimport Form from \"./components/form/form.component\";\nimport Weather from \"./components/weather/weather.component\";\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// git project https://github.com/erikflowers/weather-icons\nimport './assets/css/weather-icons.min.css'\n\nconst Api_Key = process.env.REACT_APP_WEATHER_API_KEY;\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      celsius: undefined,\n      temp_max: null,\n      temp_min: null,\n      description: \"\",\n      error: false,\n      backgroundImage: ''\n    };\n\n    // weather icons depending on the weather\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-storm-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  // check weather and specify that icon to the state\n  get_WeatherIcon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId < 232:\n        this.setState({\n          icon: icons.Thunderstorm,\n          backgroundImage: 'https://images.pexels.com/photos/1162251/pexels-photo-1162251.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: icons.Drizzle,\n          backgroundImage: 'https://images.pexels.com/photos/39811/pexels-photo-39811.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      case rangeId >= 500 && rangeId <= 521:\n        this.setState({\n          icon: icons.Rain,\n          backgroundImage: 'https://images.pexels.com/photos/1529360/pexels-photo-1529360.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: icons.Snow,\n          backgroundImage: 'https://images.pexels.com/photos/839462/pexels-photo-839462.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: icons.Atmosphere,\n          backgroundImage: 'https://images.pexels.com/photos/531321/pexels-photo-531321.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      case rangeId === 800:\n        this.setState({\n          icon: icons.Clear,\n          backgroundImage: 'https://images.pexels.com/photos/281260/pexels-photo-281260.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: icons.Clouds,\n          backgroundImage: 'https://images.pexels.com/photos/158827/field-corn-air-frisch-158827.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940'\n        });\n        break;\n      default:\n        this.setState({\n          icon: icons.Clouds,\n          backgroundImage: ''\n        });\n    }\n  }\n\n  // calculate celsius\n  calCelsius(temp) {\n    return Math.floor(temp - 273.15);\n  }\n\n  // event handler for onSubmit button in the form component\n  getWeather = async e => {\n    e.preventDefault();\n\n    // get values from textboxes\n    const country = e.target.elements.country.value.trim();\n    const city = e.target.elements.city.value.trim();\n\n    if (country && city) {\n      const api_call = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Api_Key}`\n      );\n\n      const response = await api_call.json();\n\n      // get values from api and specify to the state\n      this.setState({\n        city: `${response.name}, ${response.sys.country}`,\n        country: response.sys.country,\n        main: response.weather[0].main,\n        celsius: this.calCelsius(response.main.temp),\n        temp_max: this.calCelsius(response.main.temp_max),\n        temp_min: this.calCelsius(response.main.temp_min),\n        description: response.weather[0].description,\n        error: false\n      });\n\n      // setting icons\n      this.get_WeatherIcon(this.weatherIcon, response.weather[0].id);\n\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    const {city, icon, celsius, temp_max, temp_min, description, error, backgroundImage} = this.state;\n    return (\n      <div className=\"App\">\n        <Form loadWeather={this.getWeather} error={error}/>\n        <Weather\n          cityname={city}\n          weatherIcon={icon}\n          temp_celsius={celsius}\n          temp_max={temp_max}\n          temp_min={temp_min}\n          description={description}\n          backgroundImage = {backgroundImage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}